from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
import numpy as np
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers.core import RepeatVector
from keras.models import model_from_yaml
def data_to_reconstruction_problem(data,timestep):
    df= DataFrame(data)
    list_concat = list()
    for i in range(timestep-1, -1, -1):
        tempdf = df.shift(i)
        list_concat.append(tempdf)
    data_for_autoencoder=concat(list_concat, axis =1)
    data_for_autoencoder.dropna(inplace = True)
    return data_for_autoencoder
n_apis = 4
n_features = 34

#malware_api_csv = "e103de89e5320990d334bde4e8def5b294163f2c46702286812d7ece8ffdef9a_3216.csv"
malware_api_csv = "ffc1cf1575c5dfa972cbfe0b5472ef30_3084.csv"
dataset = read_csv(malware_api_csv, header=None, index_col=None)
values = dataset.values
reframed = data_to_reconstruction_problem(values, n_apis)

reframed = reframed.astype('float32')
reframed.to_csv("kkk.csv")
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(reframed)
dfscaled = DataFrame(scaled)


print(dfscaled.shape)
dfscaled.to_csv("abcd.csv")
train_X = dfscaled.values
n_obs = n_apis* n_features
train_X = train_X.reshape((train_X.shape[0], n_apis, n_features))
model = Sequential()
model.add(LSTM(34, input_shape=(train_X.shape[1], train_X.shape[2]), return_sequences=False))


model.add(RepeatVector(n_apis))

model.add(LSTM(34, return_sequences=True))
model.compile(loss='mse', optimizer='adam')
history = model.fit(train_X, train_X, epochs=50, batch_size=10, shuffle=False)

model2 = Sequential()

model2.add(LSTM(34, input_shape=(train_X.shape[1], train_X.shape[2]), return_sequences=False, weights=model.layers[0].get_weights()))
activations = model2.predict(train_X)

print ("mmmmmmmmmmmmmmmmmmmmm")
#print (activations)
print (type(activations))
print (activations.shape)
print ("mmmmmmmmmmmmmmmmmmmmm")

pyplot.plot(history.history['loss'], label='train')
pyplot.legend()
pyplot.show()
########################################################################

yhat = model.predict(train_X)
yhat = yhat.reshape((yhat.shape[0], n_apis * n_features))
yhat = scaler.inverse_transform(yhat)
df2 = DataFrame(yhat)
df2.to_csv("yhat_orig_value.csv")

print("--------------------------------")
print(model.get_weights()[0].shape)
print("--------------------------------")
print(model.get_weights()[1].shape)
print("--------------------------------")
print(model.get_weights()[2].shape)
print("--------------------------------")
print(model.get_weights()[3].shape)
print("--------------------------------")
print(model.get_weights()[4].shape)
print("--------------------------------")
print(model.get_weights()[5].shape)
print("--------------------------------")

########################################################################